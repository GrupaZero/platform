image: gzero/platform-ci-runner:v1

stages:
  - test
  - build
  - deploy

cache:
  key: "$CI_BUILD_REF_NAME"
  paths:
    - vendor/

test:
  stage: test
  variables:
    POSTGRES_PASSWORD: ""
    POSTGRES_USER: "gzero_cms"
    POSTGRES_DB: "gzero_cms"
    DB_HOST: "postgres"
    REDIS_HOST: "redis"
    REDIS_PORT: "6379" # Bug caused by env variable collision docker/laravel
  services:
    - postgres:9.6-alpine
    - redis:3-alpine
  script:
    - composer install --prefer-dist --no-interaction --no-suggest
    - "php vendor/bin/codecept run -c codeception.yml -o \"settings: lint: false\" --env platform"

build:
  stage: build
  variables:
    DOCKER_DRIVER: overlay
  services:
    - docker:1.12.5-dind
  script:
    - composer install --prefer-dist --no-interaction --no-dev --no-suggest
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - if [ -n "${CI_BUILD_TAG}" ]; then docker build --pull -t registry.gitlab.com/grupazero/staging:${CI_BUILD_TAG} .; fi
    - if [ -n "${CI_BUILD_TAG}" ]; then docker push registry.gitlab.com/grupazero/staging:${CI_BUILD_TAG}; fi
    - if [ -z "${CI_BUILD_TAG}" ]; then docker build --pull -t registry.gitlab.com/grupazero/staging:latest .; fi
    - if [ -z "${CI_BUILD_TAG}" ]; then docker push registry.gitlab.com/grupazero/staging:latest; fi

deploy to staging:
  image: williamyeh/ansible:alpine3
  stage: deploy
  environment: staging
  before_script:
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" > ssh.key
      - chmod 600 ssh.key
      - ssh-add ssh.key
      - mkdir -p ~/.ssh
      - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - "ansible-playbook -i ansible/hosts
      -e APP_KEY=$CI_APP_KEY
      -e APP_VERSION=$CI_BUILD_TAG
      -e DOMAIN=$CI_DOMAIN
      -e POSTGRES_USER=$CI_DB_USER
      -e POSTGRES_PASSWORD=$CI_DB_PASSWORD
      -e POSTGRES_DATABASE=$CI_DB_DATABASE
      ansible/playbooks/deploy-staging.yml"
  only:
    - tags
    - master

deploy to production:
  image: williamyeh/ansible:alpine3
  stage: deploy
  environment: production
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" > ssh.key
    - chmod 600 ssh.key
    - ssh-add ssh.key
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
  - echo "@TODO Implement"
  only:
    - tags
    - master
  when: manual