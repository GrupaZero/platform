---
- hosts: all
  name: Making sure that server have python2 installed
  gather_facts: false
  pre_tasks:
    - name: install python2
      raw: apt-get update && apt-get install -qq python-simplejson jq
    - name: add pl_PL.UTF-8 locale
      shell: locale-gen pl_PL.UTF-8

- hosts: all
  name: Provisioning server

  roles:
    - role: gantsign.oh-my-zsh
      users:
        - username: root
          oh_my_zsh:
            theme: gianu
            plugins:
              - git
      tags: [zsh]

    - role: angstwad.docker_ubuntu
      pip_install_docker_compose: false
      uninstall_previous_docker_versions: true
      tags: [docker]

    - role: kamaln7.swapfile
      swapfile_use_dd: true
      swapfile_size: 2048
      swapfile_swappiness: 10
      swapfile_vfs_cache_pressure: 50
      swapfile_location: /swapfile
      tags: [swap]

    - role: adriagalin.motd
      tags: [motd]

  tasks:
    - name: Update all packages to the latest version
      apt:
        upgrade: dist

    - name: Something
      lineinfile:
        dest: /etc/hosts
        line: "127.0.1.1 {{ inventory_hostname }} {{ inventory_hostname_short }}"
        state: present

    - name: Add FQDN to zsh
      lineinfile:
        dest: /root/.zshrc
        regexp: "^HOST="
        line: "HOST=$(hostname -f)"
        state: present

    - name: Use FQDN in oh my zsh theme
      replace:
        path: .oh-my-zsh/themes/gianu.zsh-theme
        regexp: '}%m%{'
        replace: '}%M%{'

    - name: set timezone to Etc/UTC
      timezone:
        name: Etc/UTC

    - name: Check if /etc/apt/apt.conf.d/20auto-upgrades exists
      stat:
        path: /etc/apt/apt.conf.d/20auto-upgrades
      register: stat_result

    - name: Disable APT::Periodic::Unattended-Upgrade /etc/apt/apt.conf.d/20auto-upgrades
      lineinfile:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        regexp: "^APT::Periodic::Unattended-Upgrade"
        line: 'APT::Periodic::Unattended-Upgrade "0";'
        state: present
      when: stat_result.stat.exists == True

    - name: Disable APT::Periodic::Unattended-Upgrade /etc/apt/apt.conf.d/10periodic
      lineinfile:
        dest: /etc/apt/apt.conf.d/10periodic
        regexp: "^APT::Periodic::Unattended-Upgrade"
        line: 'APT::Periodic::Unattended-Upgrade "0";'
        state: present
      when: stat_result.stat.exists == False

    - name: Enable some kernel modules for Docker
      lineinfile:
        dest: /etc/default/grub
        regexp: "^GRUB_CMDLINE_LINUX="
        line: 'GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"'
        state: present

    - name: 'Update GRUB config'
      shell: update-grub

    - name: 'Install common stuff'
      apt:
        name: htop
        state: present

    - name: Install awscli
      pip:
       name: awscli

    - name: Create .aws dir
      file:
        path: "~/.aws"
        state: directory

    - name: Disallow password authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
      notify: Restart sshd

    - name: Disallow root password authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin without-password"
        state: present
      notify: Restart sshd

    - name: "Setup alternate SSH port to {{ custom_ssh_port }}"
      lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: "^Port"
        line: "Port {{ custom_ssh_port }}"
        state: present
      when: custom_ssh_port is defined
      notify: Restart sshd

    - name: Reset ufw firewall
      ufw:
        state: reset

    - name: Ensure SSH is reloaded if need be
      meta: flush_handlers

    - name: Set inventory ssh port
      set_fact:
        ansible_port: "{{ custom_ssh_port }}"
      when: custom_ssh_port is defined

    - name: Get ssh port from cfg
      shell: grep Port /etc/ssh/sshd_config | sed 's/Port\| \| ;//g'
      register: ssh_port_grep_result

    - name: Set rate limit for ssh port
      ufw:
        rule: limit
        port: "{{ ssh_port_grep_result.stdout }}"
        proto: tcp

    - name: UFW allow http
      ufw:
        rule: allow
        port: http
        proto: tcp

    - name: UFW allow https
      ufw:
        rule: allow
        port: https
        proto: tcp

    - name: UFW allow ssh
      ufw:
        rule: allow
        port: "{{ ssh_port_grep_result.stdout }}"
        proto: tcp

    - name: Enable ufw
      ufw:
        state: enabled
        policy: deny

  handlers:
    - name: Restart sshd
      service:
        name: ssh
        state: restarted
