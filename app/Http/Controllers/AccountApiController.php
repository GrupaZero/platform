<?php namespace App\Http\Controllers;

use Gzero\Repository\UserRepository;
use Gzero\Validator\BaseUserValidator;
use Gzero\Validator\ValidationException;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Response;

class AccountApiController extends BaseController {

    /**
     * @var UserRepository
     */
    protected $userRepo;

    /**
     * @var BaseUserValidator
     */
    protected $validator;

    public function __construct(UserRepository $userRepo, BaseUserValidator $validator)
    {
        $this->userRepo  = $userRepo;
        $this->validator = $validator->setData(\Input::all());
        parent::__construct(); // TODO: Change the autogenerated stub
    }

    //
    ///**
    // * Display the specified resource.
    // *
    // * @param  int $id
    // *
    // * @return Response
    // */
    //public function show($id)
    //{
    //    return Response::json($this->enSerializer->toArray(Auth::user()));
    //}


    /**
     * Update the specified resource in storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function update($id)
    {
        try {
            if (!Input::has('password')) {
                $this->validator->setData(Input::except(['password', 'password_confirmation']));
            }
            $user  = $this->userRepo->getById($id);
            $input = $this->validator->bind('nickName', ['userId' => $user->id])->bind('email', ['userId' => $user->id])
                ->validate('update');
            $this->userRepo->update($user, $input);
            return Response::json(['success' => true]);
        } catch (ValidationException $e) {
            // @TODO Use response code from ValidationException class
            return Response::json(['success' => false, 'errors' => $e->getErrors()], 400);
        }
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        //
    }


}
