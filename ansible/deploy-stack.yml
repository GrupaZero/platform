---
- hosts: all
  remote_user: root
  pre_tasks:
    - assert:
        that:
          - "DOMAIN != ''"
          - "LETSENCRYPT_EMAIL != ''"
          - "DB_NAME != ''"
          - "DB_USER != ''"
          - "DB_PASSWORD != ''"
          - "GITLAB_REPO != ''"
  vars:
    timestamp: '{{ ansible_date_time.epoch }}'
    default_env: |
      APP_NAME=GZERO-CMS
      APP_ENV=production
      APP_KEY=base64:Ic6pTojx4LCATOES7Ugwx8H5c+U6DKGpNSopye4etVk=
      APP_DEBUG=false
      APP_LOG_LEVEL=debug
      APP_URL=http://{{ DOMAIN }}

      DOMAIN={{ DOMAIN }}
      SESSION_DOMAIN=.{{ DOMAIN }}
      SESSION_SECURE_COOKIE=true

      DB_CONNECTION=pgsql
      DB_HOST=db
      DB_PORT=5432
      DB_DATABASE=gzero_cms
      DB_USERNAME=gzero_cms
      DB_PASSWORD=test

      BROADCAST_DRIVER=log
      CACHE_DRIVER=redis
      SESSION_DRIVER=redis
      QUEUE_DRIVER=redis

      REDIS_HOST=redis
      REDIS_PASSWORD=null
      REDIS_PORT=6379
      REDIS_DB=0

      MAIL_DRIVER=smtp
      MAIL_HOST=smtp.mailtrap.io
      MAIL_PORT=2525
      MAIL_USERNAME=null
      MAIL_PASSWORD=null
      MAIL_ENCRYPTION=null

  vars_prompt:
    - name: "gitlab_user"
      prompt: "GitLab username"
      private: no
    - name: "gitlab_token"
      prompt: "Gitlab token"
      private: yes

  tasks:
    - name: Log in to GitLab.com registry or force re-authorization
      docker_login:
        registry: registry.gitlab.com
        username: '{{ gitlab_user }}'
        password: '{{ gitlab_token }}'
        reauthorize: yes

    - name: Create directories
      file:
        path: "{{ item.path }}"
        state: directory
      with_items:
        - { path: '/root/backups'}
        - { path: '/root/backups/deployments'}
        - { path: '/root/volumes'}
        - { path: '/root/volumes/redis'}
        - { path: '/root/volumes/postgresql'}
        - { path: '/root/volumes/uploads'}
        - { path: '/root/volumes/letsencrypt'}

    - name: Check Docker Swarm State
      shell: docker info --format '{% raw %}{{json .Swarm.LocalNodeState}}{% endraw %}' | jq . -r
      register: docker_swarm_state

    - name: Init Docker Swarm
      shell: >
        docker swarm init
        --advertise-addr={{ swarm_ip | default(ansible_default_ipv4.address) }}
      when: docker_swarm_state.stdout == "inactive"

    - name: Copy docker stack file
      template:
        src: ../templates/app-stack.yml
        dest: /root/app-stack.yml
        force: yes

    - name: Copy Treafik configuration file
      template:
        src: ../templates/traefik.j2
        dest: /root/traefik.toml
        force: yes

    - name: Create docker secret - db_password  
      docker_secret:
          name: db_password_{{ timestamp }}
          state: present
          force: yes
          data: '{{ DB_PASSWORD }}'

    - name: Create docker secret app_env
      docker_secret:
          name: app_env_latest_{{ timestamp }}
          state: present
          force: yes
          data: '{{ APP_ENV | default(default_env) }}'

    - name: Deploy docker stack
      shell: docker stack deploy -c /root/app-stack.yml --with-registry-auth app

    - name: Wait for docker containers
      wait_for:
          port: 443
          delay: 15
          timeout: 300

    - name: Remove old SSH key if present
      file:
        path: '{{ item.path }}'
        state: absent
      with_items:
        - { path: '/root/.ssh/id_rsa'}
        - { path: '/root/.ssh/id_rsa.pub' }

    - name: Generate deployment SSH key
      shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""

    - name: Fetching SSH key - add this deployment key as secret variable at GitLab.com
      fetch:
        src: /root/.ssh/id_rsa
        dest: deployment-ssh-key
        flat: yes
